{
  "_args": [
    [
      {
        "raw": "ts-loader",
        "scope": null,
        "escapedName": "ts-loader",
        "name": "ts-loader",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\SELF LEARNING\\JAVASCRIPT\\learning javascript\\webpacks"
    ]
  ],
  "_from": "ts-loader@latest",
  "_id": "ts-loader@3.2.0",
  "_inCache": true,
  "_location": "/ts-loader",
  "_nodeVersion": "8.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ts-loader-3.2.0.tgz_1511989998887_0.227304584113881"
  },
  "_npmUser": {
    "name": "johnnyreilly",
    "email": "johnny_reilly@hotmail.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {
    "color-convert": "1.9.1",
    "escape-string-regexp": "1.0.5"
  },
  "_requested": {
    "raw": "ts-loader",
    "scope": null,
    "escapedName": "ts-loader",
    "name": "ts-loader",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/ts-loader/-/ts-loader-3.2.0.tgz",
  "_shasum": "23211922179b81f7448754b7fdfca45b8374a15a",
  "_shrinkwrap": null,
  "_spec": "ts-loader",
  "_where": "D:\\SELF LEARNING\\JAVASCRIPT\\learning javascript\\webpacks",
  "author": {
    "name": "James Brantly",
    "email": "james@jbrantly.com",
    "url": "http://www.jbrantly.com/"
  },
  "bugs": {
    "url": "https://github.com/TypeStrong/ts-loader/issues"
  },
  "contributors": [
    {
      "name": "John Reilly",
      "email": "johnny_reilly@hotmail.com",
      "url": "https://blog.johnnyreilly.com"
    },
    {
      "name": "James Brantly",
      "email": "james@jbrantly.com",
      "url": "http://www.jbrantly.com/"
    }
  ],
  "dependencies": {
    "chalk": "^2.3.0",
    "enhanced-resolve": "^3.0.0",
    "loader-utils": "^1.0.2",
    "semver": "^5.0.1"
  },
  "description": "TypeScript loader for webpack",
  "devDependencies": {
    "@types/semver": "^5.4.0",
    "babel": "^6.0.0",
    "babel-core": "^6.0.0",
    "babel-loader": "^7.0.0",
    "babel-polyfill": "^6.16.0",
    "babel-preset-es2015": "^6.0.0",
    "babel-preset-es2016": "^6.16.0",
    "babel-preset-react": "^6.0.0",
    "escape-string-regexp": "^1.0.3",
    "fs-extra": "^4.0.0",
    "glob": "^7.1.1",
    "html-webpack-plugin": "^2.17.0",
    "jasmine-core": "^2.5.2",
    "karma": "^1.3.0",
    "karma-chrome-launcher": "^2.2.0",
    "karma-jasmine": "^1.0.0",
    "karma-mocha-reporter": "^2.0.0",
    "karma-sourcemap-loader": "^0.3.6",
    "karma-webpack": "^2.0.1",
    "mkdirp": "^0.5.1",
    "mocha": "^4.0.0",
    "rimraf": "^2.6.2",
    "typescript": "^2.6.1",
    "webpack": "^3.6.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-4g8BF3gKWBHeM1jAFmMPHofuJlwTUU4iHJ0i3mwXRHwy74RU6VBOgl9kDVMGpapvGcMlVqV5G6v9XmV66Qqd7w==",
    "shasum": "23211922179b81f7448754b7fdfca45b8374a15a",
    "tarball": "https://registry.npmjs.org/ts-loader/-/ts-loader-3.2.0.tgz"
  },
  "engines": {
    "node": ">=4.3.0 <5.0.0 || >=5.10"
  },
  "gitHead": "e5b2f51dbb968de769e0673bc6a34d7ce99d350d",
  "homepage": "https://github.com/TypeStrong/ts-loader",
  "keywords": [
    "ts-loader",
    "typescript-loader",
    "webpack",
    "loader",
    "typescript",
    "ts"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "blakeembrey",
      "email": "hello@blakeembrey.com"
    },
    {
      "name": "jbrantly",
      "email": "james@jbrantly.com"
    },
    {
      "name": "johnnyreilly",
      "email": "johnny_reilly@hotmail.com"
    }
  ],
  "name": "ts-loader",
  "optionalDependencies": {},
  "readme": "# TypeScript loader for webpack\r\n\r\n[![npm Version](https://img.shields.io/npm/v/ts-loader.svg)](https://www.npmjs.com/package/ts-loader)\r\n[![Build Status](https://travis-ci.org/TypeStrong/ts-loader.svg?branch=master)](https://travis-ci.org/TypeStrong/ts-loader)\r\n[![Build Status](https://ci.appveyor.com/api/projects/status/bjh0r0d4ckspgkh9/branch/master?svg=true)](https://ci.appveyor.com/project/JohnReilly/ts-loader/branch/master)\r\n[![Downloads](http://img.shields.io/npm/dm/ts-loader.svg)](https://npmjs.org/package/ts-loader)\r\n[![Greenkeeper badge](https://badges.greenkeeper.io/TypeStrong/ts-loader.svg)](https://greenkeeper.io/)\r\n[![Join the chat at https://gitter.im/TypeStrong/ts-loader](https://img.shields.io/badge/gitter-join%20chat-brightgreen.svg)](https://gitter.im/TypeStrong/ts-loader)\r\n\r\nThis is the typescript loader for webpack.\r\n\r\n## Getting Started\r\n\r\n### Examples\r\n\r\nWe have a number of example setups to accomodate different workflows.  From \"[vanilla](examples/vanilla)\" ts-loader, to using ts-loader in combination with [babel](https://babeljs.io/) for transpilation, [happypack](https://github.com/amireh/happypack) or [thread-loader](https://github.com/webpack-contrib/thread-loader) for faster builds and [fork-ts-checker-webpack-plugin](https://github.com/Realytics/fork-ts-checker-webpack-plugin) for performing type checking in a separate process. Not forgetting [Hot Module Replacement](https://webpack.js.org/api/hot-module-replacement/). Our examples can be found [here](examples/).\r\n\r\n### Babel\r\n\r\nts-loader works very well in combination with [babel](https://babeljs.io/) and [babel-loader](https://github.com/babel/babel-loader).  There is an [example](https://github.com/Microsoft/TypeScriptSamples/tree/master/react-flux-babel-karma) of this in the official [TypeScript Samples](https://github.com/Microsoft/TypeScriptSamples). Alternatively take a look at our own [example](examples/react-babel-karma-gulp).\r\n\r\n### Faster Builds\r\n\r\nAs your project becomes bigger and bigger, compilation time increases linearly. It's because typescript's semantic checker has to inspect all files on every rebuild. The simple solution is to disable it by using the `transpileOnly: true` option, but doing so leaves you without type checking.\r\n\r\nYou probably don't want to give up type checking; that's rather the point of TypeScript.  So what you can do is use the [fork-ts-checker-webpack-plugin](https://github.com/Realytics/fork-ts-checker-webpack-plugin). It runs the type checker on a separate process, so your build remains fast thanks to `transpileOnly: true` but you still have the type checking. Also, the plugin has several optimizations to make incremental type checking faster (AST cache, multiple workers).\r\n\r\nIf you'd like to see a simple setup take a look at [our simple example](examples/fork-ts-checker/). For a more complex setup take a look at our [more involved example](examples/react-babel-karma-gulp-fork-ts-checker).\r\n\r\nIf you'd like to make things even faster still (I know, right?) then you might want to consider using ts-loader with [happypack](https://github.com/amireh/happypack) which speeds builds by parallelising work.  (This should be used in combination with  [fork-ts-checker-webpack-plugin](https://github.com/Realytics/fork-ts-checker-webpack-plugin) for typechecking.)  If you'd like to see a simple setup take a look at [our simple example](examples/happypack/). For a more complex setup take a look at our [more involved example](examples/react-babel-karma-gulp-happypack).\r\n\r\nThere is a \"webpack-way\" of parallelising builds.  Instead of using happypack you can use ts-loader with ts-loader with [thread-loader](https://github.com/webpack-contrib/thread-loader) and [cache-loader](https://github.com/webpack-contrib/cache-loader) in combination.  (Again, this should be used in combination with  [fork-ts-checker-webpack-plugin](https://github.com/Realytics/fork-ts-checker-webpack-plugin) for typechecking.)  If you'd like to see a simple setup take a look at [our simple example](examples/thread-loader/). For a more complex setup take a look at our [more involved example](examples/react-babel-karma-gulp-thread-loader).\r\n\r\nTo read more on this look at this [webpack Medium post](https://medium.com/webpack/typescript-webpack-super-pursuit-mode-83cc568dea79).\r\n\r\n### Installation\r\n\r\n```\r\nyarn add ts-loader\r\n```\r\n\r\nor\r\n\r\n```\r\nnpm install ts-loader\r\n```\r\n\r\nYou will also need to install TypeScript if you have not already.\r\n\r\n```\r\nyarn add typescript\r\n```\r\n\r\nor\r\n\r\n```\r\nnpm install typescript\r\n```\r\n\r\n### Running\r\n\r\nUse webpack like normal, including `webpack --watch` and `webpack-dev-server`, or through another\r\nbuild system using the [Node.js API](http://webpack.github.io/docs/node.js-api.html).\r\n\r\n### Compatibility\r\n\r\n#### TypeScript / Webpack\r\n\r\nts-loader supports the latest and greatest version of TypeScript right back to v2.0. ts-loader supports webpack 3.  Our continuous integration test suites run against webpack 3; **not** webpack 2. That said, ts-loader worked fine with webpack 2 when we last checked.\r\n\r\nA full test suite runs each night (and on each pull request). It runs both on [Linux](https://travis-ci.org/TypeStrong/ts-loader) and [Windows](https://ci.appveyor.com/project/JohnReilly/ts-loader), testing ts-loader against major releases of TypeScript.  The test suite also runs against TypeScript@next (because we want to use it as much as you do).\r\n\r\nIf you become aware of issues not caught by the test suite then please let us know. Better yet, write a test and submit it in a PR!\r\n\r\n### Configuration\r\n\r\n1. Create or update `webpack.config.js` like so:\r\n\r\n    ```javascript\r\n    module.exports = {\r\n      devtool: 'inline-source-map',\r\n      entry: './app.ts',\r\n      output: {\r\n        filename: 'bundle.js'\r\n      },\r\n      resolve: {\r\n        // Add `.ts` and `.tsx` as a resolvable extension.\r\n        extensions: ['.ts', '.tsx', '.js']\r\n      },\r\n      module: {\r\n        rules: [\r\n          // all files with a `.ts` or `.tsx` extension will be handled by `ts-loader`\r\n          { test: /\\.tsx?$/, loader: 'ts-loader' }\r\n        ]\r\n      }\r\n    }\r\n    ```\r\n\r\n2. Add a [`tsconfig.json`](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html) file. (The one below is super simple; but you can tweak this to your hearts desire)\r\n\r\n    ```json\r\n    {\r\n      \"compilerOptions\": {\r\n        \"sourceMap\": true\r\n      }\r\n    }\r\n    ```\r\n\r\nThe [tsconfig.json](http://www.typescriptlang.org/docs/handbook/tsconfig-json.html) file controls\r\nTypeScript-related options so that your IDE, the `tsc` command, and this loader all share the\r\nsame options.\r\n\r\n#### `devtool` / sourcemaps\r\n\r\nIf you want to be able to debug your original source then you can thanks to the magic of sourcemaps.  There are 2 steps to getting this set up with ts-loader and webpack.  \r\n\r\nFirst, for ts-loader to produce **sourcemaps**, you will need to set the [tsconfig.json](http://www.typescriptlang.org/docs/handbook/tsconfig-json.html) option as `\"sourceMap\": true`.\r\n\r\nSecond, you need to set the `devtool` option in your `webpack.config.js` to support the type of sourcemaps you want.  To make your choice have a read of the [`devtool` webpack docs](https://webpack.js.org/configuration/devtool/).  You may be somewhat daunted by the choice available.  You may also want to vary the sourcemap strategy depending on your build environment. Here are some example strategies for different environments:\r\n\r\n- `devtool: 'inline-source-map'` - Solid sourcemap support; the best \"all-rounder\".  Works well with karma-webpack (not all strategies do)\r\n- `devtool: 'cheap-module-eval-source-map'` - Best support for sourcemaps whilst debugging.\r\n- `devtool: 'source-map'` - Approach that plays well with UglifyJsPlugin; typically you might use this in Production\r\n\r\n### Code Splitting and Loading Other Resources\r\n\r\nLoading css and other resources is possible but you will need to make sure that\r\nyou have defined the `require` function in a [declaration file](https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html).\r\n\r\n```typescript\r\ndeclare var require: {\r\n    <T>(path: string): T;\r\n    (paths: string[], callback: (...modules: any[]) => void): void;\r\n    ensure: (paths: string[], callback: (require: <T>(path: string) => T) => void) => void;\r\n};\r\n```\r\n\r\nThen you can simply require assets or chunks per the [webpack documentation](https://webpack.js.org/guides/code-splitting/).\r\n\r\n```js\r\nrequire('!style!css!./style.css');\r\n```\r\n\r\nThe same basic process is required for code splitting. In this case, you `import` modules you need but you\r\ndon't directly use them. Instead you require them at [split points](http://webpack.github.io/docs/code-splitting.html#defining-a-split-point). See [this example](test/comparison-tests/codeSplitting) and [this example](test/comparison-tests/es6codeSplitting) for more details.\r\n\r\n[TypeScript 2.4 provides support for ECMAScript's new `import()` calls. These calls import a module and return a promise to that module.](https://blogs.msdn.microsoft.com/typescript/2017/06/12/announcing-typescript-2-4-rc/)  This is also supported in webpack - details on usage can be found [here](https://webpack.js.org/guides/code-splitting-async/#dynamic-import-import-).  Happy code splitting!\r\n\r\n### Declarations (.d.ts)\r\n\r\nTo output a built .d.ts file, you can set \"declaration\": true in your tsconfig, and use the [DeclarationBundlerPlugin](https://www.npmjs.com/package/declaration-bundler-webpack-plugin) in your webpack config.\r\n\r\n### Failing the build on TypeScript compilation error\r\n\r\nThe build **should** fail on TypeScript compilation errors as of webpack 2. If for some reason it does not, you can use the [webpack-fail-plugin](https://www.npmjs.com/package/webpack-fail-plugin). \r\n\r\nFor more background have a read of [this issue](https://github.com/TypeStrong/ts-loader/issues/108).\r\n\r\n### Options\r\n\r\nThere are two types of options: TypeScript options (aka \"compiler options\") and loader options. TypeScript options should be set using a tsconfig.json file. Loader options can be specified through the `options` property in the webpack configuration:\r\n\r\n```javascript\r\nmodule.exports = {\r\n  ...\r\n  module: {\r\n    rules: [\r\n      { \r\n        test: /\\.tsx?$/, \r\n        use: [\r\n          {\r\n            loader: 'ts-loader', \r\n            options: {\r\n              transpileOnly: true\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n### Loader Options\r\n\r\n#### transpileOnly *(boolean) (default=false)*\r\n\r\nIf you want to speed up compilation significantly you can set this flag.\r\nHowever, many of the benefits you get from static type checking between\r\ndifferent dependencies in your application will be lost. \r\n\r\nIt's advisable to use `transpileOnly` alongside the [fork-ts-checker-webpack-plugin](https://github.com/Realytics/fork-ts-checker-webpack-plugin) to get full type checking again. To see what this looks like in practice then either take a look at [our simple example](examples/fork-ts-checker). For a more complex setup take a look at our [more involved example](examples/react-babel-karma-gulp-fork-ts-checker).\r\n\r\n#### happyPackMode *(boolean) (default=false)*\r\n\r\nIf you're using [HappyPack](https://github.com/amireh/happypack) or [thread-loader](https://github.com/webpack-contrib/thread-loader) to parallise your builds then you'll need to set this to `true`.  This implicitly sets `*transpileOnly*` to `true` and **WARNING!** stops registering ***all*** errors to webpack. \r\n\r\nIt's advisable to use this with the [fork-ts-checker-webpack-plugin](https://github.com/Realytics/fork-ts-checker-webpack-plugin) to get full type checking again. To see what this looks like in practice then either take a look at [our simple HappyPack example](examples/happypack) / [our simple thread-loader example](examples/thread-loader). For a more complex setup take a look at our [more involved HappyPack example](examples/react-babel-karma-gulp-happypack) /  [more involved thread-loader example](examples/react-babel-karma-gulp-thread-loader).  ***IMPORTANT***: If you are using fork-ts-checker-webpack-plugin alongside HappyPack or thread-loader then ensure you set the `checkSyntacticErrors` option like so:\r\n\r\n```\r\n        new ForkTsCheckerWebpackPlugin({ checkSyntacticErrors: true })\r\n```\r\n\r\nThis will ensure that the plugin checks for both syntactic errors (eg `const array = [{} {}];`) and semantic errors (eg `const x: number = '1';`).  By default the plugin only checks for semantic errors (as when used with ts-loader in `transpileOnly` mode, ts-loader will still report syntactic errors).\r\n\r\n#### getCustomTransformers *( () => { before?: TransformerFactory<SourceFile>[]; after?: TransformerFactory<SourceFile>[];  } )*\r\n\r\nProvide custom transformers - only compatible with TypeScript 2.3+ (and 2.4 if using `transpileOnly` mode). For example usage take a look at [typescript-plugin-styled-components](https://github.com/Igorbek/typescript-plugin-styled-components) or our [test](test/comparison-tests/customTransformer).\r\n\r\n#### logInfoToStdOut *(boolean) (default=false)*\r\n\r\nThis is important if you read from stdout or stderr and for proper error handling.\r\nThe default value ensures that you can read from stdout e.g. via pipes or you use webpack -j to generate json output.\r\n\r\n#### logLevel *(string) (default=warn)*\r\n\r\nCan be `info`, `warn` or `error` which limits the log output to the specified log level.\r\nBeware of the fact that errors are written to stderr and everything else is written to stderr (or stdout if logInfoToStdOut is true).\r\n\r\n#### silent *(boolean) (default=false)*\r\n\r\nIf true, no console.log messages will be emitted. Note that most error\r\nmessages are emitted via webpack which is not affected by this flag.\r\n\r\n#### ignoreDiagnostics *(number[]) (default=[])*\r\n\r\nYou can squelch certain TypeScript errors by specifying an array of diagnostic\r\ncodes to ignore.\r\n\r\n#### compiler *(string) (default='typescript')*\r\n\r\nAllows use of TypeScript compilers other than the official one. Should be\r\nset to the NPM name of the compiler, eg [`ntypescript`](https://github.com/basarat/ntypescript).\r\n\r\n#### configFile *(string) (default='tsconfig.json')*\r\n\r\nAllows you to specify where to find the TypeScript configuration file.\r\n\r\nYou may provide\r\n\r\n* just a file name. The loader then will search for the config file of each entry point in the respective entry point's containing folder. If a config file cannot be found there, it will travel up the parent directory chain and look for the config file in those folders.\r\n* a relative path to the configuration file. It will be resolved relative to the respective `.ts` entry file.\r\n* an absolute path to the configuration file.\r\n\r\n#### colors *(boolean) (default=true)*\r\n\r\nIf `false`, disables built-in colors in logger messages.\r\n\r\n#### errorFormatter *((message: ErrorInfo, colors: boolean) => string) (default=undefined)*\r\n\r\nBy default ts-loader formats TypeScript compiler output for an error or a warning in the style:\r\n\r\n```\r\n[tsl] ERROR in myFile.ts(3,14)\r\n      TS4711: you did something very wrong\r\n```\r\n\r\nIf that format is not to your taste you can supply your own formatter using the `errorFormatter` option. Below is a template for a custom error formatter.  Please note that the `colors` parameter is an instance of [`chalk`](https://github.com/chalk/chalk) which you can use to color your output. (This instance will respect the `colors` option.)\r\n\r\n```js\r\nfunction customErrorFormatter(error, colors) {\r\n    const messageColor = error.severity === 'warning' ? colors.bold.yellow : colors.bold.red;\r\n    return 'Does not compute.... ' + messageColor(Object.keys(error).map(key => `${key}: ${error[key]}`));\r\n}\r\n```\r\n\r\nIf the above formatter received an error like this:\r\n\r\n```\r\n{\r\n  \"code\":2307,\r\n  \"severity\": \"error\",\r\n  \"content\": \"Cannot find module 'components/myComponent2'.\",\r\n  \"file\":\"/.test/errorFormatter/app.ts\",\r\n  \"line\":2,\r\n  \"character\":31\r\n}\r\n```  \r\n\r\nIt would produce an error message that said: \r\n\r\n```\r\nDoes not compute.... code: 2307,severity: error,content: Cannot find module 'components/myComponent2'.,file: /.test/errorFormatter/app.ts,line: 2,character: 31\r\n```\r\n\r\nAnd the bit after \"Does not compute.... \" would be red.\r\n\r\n#### compilerOptions *(object) (default={})*\r\n\r\nAllows overriding TypeScript options. Should be specified in the same format\r\nas you would do for the `compilerOptions` property in tsconfig.json.\r\n\r\n#### instance *(string)*\r\n\r\nAdvanced option to force files to go through different instances of the\r\nTypeScript compiler. Can be used to force segregation between different parts\r\nof your code.\r\n\r\n#### entryFileCannotBeJs *(boolean) (default=false) DEPRECATED*\r\n\r\nIf the `allowJs` compiler option is `true` then it's possible for your entry files to be JS. There is a [known issue using ts-loader with TypeScript 2.3 and below](https://github.com/TypeStrong/ts-loader/issues/655).  This option exists to work around that issue if you are using ts-loader with TypeScript 2.3 or below.\r\n\r\nThis option will be removed in a future version of ts-loader.\r\n\r\n#### appendTsSuffixTo *(RegExp[]) (default=[])*\r\n#### appendTsxSuffixTo *(RegExp[]) (default=[])*\r\nA list of regular expressions to be matched against filename. If filename matches one of the regular expressions, a `.ts` or `.tsx` suffix will be appended to that filename.\r\n\r\nThis is useful for `*.vue` [file format](https://vuejs.org/v2/guide/single-file-components.html) for now. (Probably will benefit from the new single file format in the future.)\r\n\r\nExample:\r\n\r\nwebpack.config.js:\r\n\r\n```javascript\r\nmodule.exports = {\r\n    entry: './index.vue',\r\n    output: { filename: 'bundle.js' },\r\n    resolve: {\r\n        extensions: ['.ts', '.vue']\r\n    },\r\n    module: {\r\n        rules: [\r\n            { test: /\\.vue$/, loader: 'vue-loader' },\r\n            { test: /\\.ts$/, loader: 'ts-loader', options: { appendTsSuffixTo: [/\\.vue$/] } }\r\n        ]\r\n    } \r\n}\r\n```\r\n\r\nindex.vue\r\n\r\n```vue\r\n<template><p>hello {{msg}}</p></template>\r\n<script lang=\"ts\">\r\nexport default {\r\n  data(): Object {\r\n    return {\r\n      msg: \"world\"\r\n    }\r\n  },\r\n}\r\n</script>\r\n```\r\n\r\nWe can handle `.tsx` by quite similar way:\r\n\r\nwebpack.config.js:\r\n\r\n```javascript\r\nmodule.exports = {\r\n    entry: './index.vue',\r\n    output: { filename: 'bundle.js' },\r\n    resolve: {\r\n        extensions: ['.ts', '.tsx', '.vue', '.vuex']\r\n    },\r\n    module: {\r\n        rules: [\r\n            { test: /\\.vue$/, loader: 'vue-loader',\r\n              options: {\r\n                loaders: {\r\n                  ts: 'ts-loader',\r\n                  tsx: 'babel-loader!ts-loader',\r\n                }\r\n              }\r\n            },\r\n            { test: /\\.ts$/, loader: 'ts-loader', options: { appendTsSuffixTo: [/TS\\.vue$/] } }\r\n            { test: /\\.tsx$/, loader: 'babel-loader!ts-loader', options: { appendTsxSuffixTo: [/TSX\\.vue$/] } }\r\n        ]\r\n    } \r\n}\r\n```\r\n\r\ntsconfig.json (set `jsx` option to `preserve` to let babel handle jsx)\r\n\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"jsx\": \"preserve\"\r\n  }\r\n}\r\n```\r\n\r\nindex.vue\r\n\r\n```vue\r\n<script lang=\"tsx\">\r\nexport default {\r\n  functional: true,\r\n  render(h, c) {\r\n    return (<div>Content</div>);\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\nOr if you want to use only tsx, just use the `appendTsxSuffixTo` option only:\r\n\r\n```javascript\r\n            { test: /\\.ts$/, loader: 'ts-loader' }\r\n            { test: /\\.tsx$/, loader: 'babel-loader!ts-loader', options: { appendTsxSuffixTo: [/\\.vue$/] } }\r\n```\r\n\r\n#### onlyCompileBundledFiles *(boolean) (default=false)*\r\n\r\nThe default behavior of ts-loader is to act as a drop-in replacement for the `tsc` command,\r\nso it respects the `include`, `files`, and `exclude` options in your `tsconfig.json`, loading\r\nany files specified by those options. The `onlyCompileBundledFiles` option modifies this behavior,\r\nloading only those files that are actually bundled by webpack, as well as any `.d.ts` files included\r\nby the `tsconfig.json` settings. `.d.ts` files are still included because they may be needed for\r\ncompilation without being explicitly imported, and therefore not picked up by webpack.\r\n\r\n#### contextAsConfigBasePath *(boolean) (default=false)*\r\n\r\nIf true, will parse the TypeScript configuration file with \r\n[webpack.context](https://webpack.js.org/configuration/entry-context/#context) as base path.\r\nPer default the directory of the configuration file is used as base path. Relative paths in the configuration \r\nfile are resolved with respect to the base path when parsed. Option `contextAsConfigBasePath` allows to set option\r\n`configFile` to a path other than the project root (e.g. a NPM package) and the base path for `ts-loader` is [webpack.context](https://webpack.js.org/configuration/entry-context/#context) (which is most of the time the project root).\r\n\r\nKeep in mind that **not** having a `tsconfig.json` in your project root can cause different behaviour between `ts-loader` and `tsc`.\r\nWhen using editors like `VS Code` it is advised to add a `tsconfig.json` file to the root of the project and extend the config file\r\nreferenced in option `configFile`. For more information [please read the PR](https://github.com/TypeStrong/ts-loader/pull/681) that contributed this option.\r\n\r\nWebpack:\r\n\r\n```javascript\r\n{\r\n  loader: require.resolve('ts-loader'),\r\n  options: {\r\n    contextAsConfigBasePath: true,\r\n    configFile: require.resolve('ts-config-react-app')\r\n  }\r\n}\r\n\r\n```\r\n\r\nExtending `tsconfig.json`:\r\n\r\n```json\r\n{ \"extends\": \"./node_modules/ts-config-react-app/index\" }\r\n```\r\n\r\nNote that changes in the extending file while not be respected by `ts-loader`. Its purpose is to satisfy the code editor.\r\n\r\n### `LoaderOptionsPlugin`\r\n\r\n[There's a known \"gotcha\"](https://github.com/TypeStrong/ts-loader/issues/283) if you are using webpack 2 with the `LoaderOptionsPlugin`.  If you are faced with the `Cannot read property 'unsafeCache' of undefined` error then you probably need to supply a `resolve` object as below: (Thanks @jeffijoe!)\r\n \t\t\r\n ```js\t\t\r\n new LoaderOptionsPlugin({\t\t\r\n   debug: false,\t\t\r\n   options: {\t\t\r\n     resolve: {\r\n       extensions: ['.ts', '.tsx', '.js']\r\n     }\t\r\n   }\t\t\r\n })\t\t\r\n ```\r\n \r\n### Usage with Webpack watch\r\n \r\nBecause TS will generate .js and .d.ts files, you should ignore these files, otherwise watchers may go into an infinite watch loop. For example, when using Webpack, you may wish to add this to your webpack.conf.js file:\r\n \r\n ```js\r\n  plugins: [\r\n    new webpack.WatchIgnorePlugin([\r\n      /\\.js$/,\r\n      /\\.d\\.ts$/\r\n    ])\r\n  ],\r\n  ```\r\n\r\nIt's worth noting that use of the `LoaderOptionsPlugin` is [only supposed to be a stopgap measure](https://webpack.js.org/plugins/loader-options-plugin/).  You may want to look at removing it entirely.\r\n\r\n## Contributing\r\n\r\nThis is your TypeScript loader! We want you to help make it even better. Please feel free to contribute; see the [contributor's guide](CONTRIBUTING.md) to get started.\r\n\r\n## License\r\n\r\nMIT License\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/TypeStrong/ts-loader.git"
  },
  "scripts": {
    "build": "tsc --version && tsc --project \"./src\"",
    "comparison-tests": "npm link ./test/comparison-tests/testLib && node test/comparison-tests/run-tests.js",
    "comparison-tests-generate": "node test/comparison-tests/stub-new-version.js",
    "execution-tests": "node test/execution-tests/run-tests.js",
    "test": "node test/run-tests.js"
  },
  "version": "3.2.0"
}
